{"version":3,"sources":["components/DateTime.js","components/Display.js","components/Panel.js","components/Clock.js","App.js","serviceWorker.js","index.js"],"names":["DateTime","date","this","Date","monthNames","dayNames","formatUnitOfTime","getHours","getMinutes","getSeconds","getDay","getUTCDate","getMonth","getFullYear","unitOfTime","dateTime","dayOfMonth","month","year","dayOfWeek","hours","minutes","seconds","Display","props","className","isDateVisible","toDateString","toTimeString","defaultProps","Panel","type","checked","dateOn","onChange","toggleDate","class","Clock","startTime","timer","setInterval","setState","prevState","state","bind","clearInterval","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gQAAqBA,E,WAEjB,WAAYC,GAAO,oBACfC,KAAKD,KAAOA,GAAc,IAAIE,KAE9BD,KAAKE,WAAa,CACd,OAAQ,aAAS,OACjB,QAAS,aAAS,UAClB,SAAU,eAAW,WACrB,OAAQ,aAAS,eAGrBF,KAAKG,SAAW,CACZ,YAAa,YAAQ,mBAAY,gBACjC,OAAQ,YAAa,S,oDAKzB,OAAOH,KAAKI,iBAAiBJ,KAAKD,KAAKM,c,gCAIvC,OAAOL,KAAKI,iBAAiBJ,KAAKD,KAAKO,gB,gCAIvC,OAAON,KAAKI,iBAAiBJ,KAAKD,KAAKQ,gB,kCAIvC,OAAOP,KAAKG,SAASH,KAAKD,KAAKS,Y,mCAI/B,OAAOR,KAAKI,iBAAiBJ,KAAKD,KAAKU,gB,8BAIvC,OAAOT,KAAKE,WAAWF,KAAKD,KAAKW,c,6BAIjC,MAAM,GAAN,OAAUV,KAAKD,KAAKY,iB,uCAGPC,GACb,OAAOA,EAAa,GAAb,WAAsBA,GAAtB,UAAwCA,M,oCAG/Bb,GAChB,IAAIc,EAAW,IAAIf,EAASC,GAE5B,MAAM,IAAN,OAAWc,EAASC,aAApB,YAAoCD,EAASE,QAA7C,YAAwDF,EAASG,OAAjE,YAA2EH,EAASI,e,mCAGpElB,GAChB,IAAIc,EAAW,IAAIf,EAASC,GAE5B,MAAM,GAAN,OAAUc,EAASK,QAAnB,YAA8BL,EAASM,UAAvC,YAAoDN,EAASO,e,KCvD7DC,EAAU,SAACC,GAAD,OAEd,yBAAKC,UAAU,SACTD,EAAME,eAAiB,uBAAGD,UAAU,QAAQzB,EAAS2B,aAAaH,EAAMvB,OAC1E,uBAAGwB,UAAU,QAAQzB,EAAS4B,aAAaJ,EAAMvB,OACjD,wBAAIwB,UAAU,QAAd,iCAIPF,EAAQM,aAAe,CACpB5B,KAAM,IAAIE,KACVuB,eAAe,GAQJH,QCpBTO,EAAQ,SAACN,GACX,OACI,yBAAKC,UAAU,aACX,6BACA,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,oBACX,yBAAKA,UAAU,SACX,2BAAOA,UAAU,UACb,2BAAOM,KAAK,WAAWC,QAASR,EAAMS,OAAQC,SAAUV,EAAMW,aAC9D,0BAAMC,MAAM,iBASxCN,EAAMD,aAAe,CACjBI,QAAQ,EACRE,WAAY,cAQDL,QCUAO,E,YApCX,aAAc,IAAD,8BACT,+CAaJC,UAAY,WACV,EAAKC,MAAQC,aAAY,WACnB,EAAKC,SAAS,CACVxC,KAAM,IAAIE,SAEhB,MAnBO,EAqBbgC,WAAa,WACT,EAAKM,UAAS,SAACC,GAAD,MAAgB,CAC1BhB,eAAiBgB,EAAUhB,mBArB/B,EAAKiB,MAAQ,CACT1C,KAAM,IAAIE,KACVuB,eAAe,GAEnB,EAAKS,WAAa,EAAKA,WAAWS,KAAhB,gBANT,E,iFAST1C,KAAKoC,c,6CAGLO,cAAc3C,KAAKqC,S,+BAgBnB,OACI,6BACI,kBAAC,EAAD,CAAOJ,WAAYjC,KAAKiC,WAAaF,OAAQ/B,KAAKyC,MAAMjB,gBACxD,kBAAC,EAAD,CAASzB,KAAMC,KAAKyC,MAAM1C,KAAMyB,cAAexB,KAAKyC,MAAMjB,qB,GAhCrDoB,aCWNC,E,iLARX,OACE,6BACG,kBAAC,EAAD,W,GALSD,aCQEE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.8ad13859.chunk.js","sourcesContent":["export default class DateTime {\r\n\r\n    constructor(date) {\r\n        this.date = date ? date : new Date();\r\n\r\n        this.monthNames = [\r\n            'Ocak', 'Şubat', 'Mart',\r\n            'Nisan', 'Mayıs', 'Haziran',\r\n            'Temmuz', 'Ağustos', 'Eylül',\r\n            'Ekim', 'Kasım', 'Aralık'\r\n        ];\r\n    \r\n        this.dayNames = [\r\n            'Pazartesi', 'Salı', 'Çarşamba', 'Perşembe',\r\n            'Cuma', 'Cumartesi', 'Pazar'\r\n        ];\r\n    }\r\n\r\n    hours() {\r\n        return this.formatUnitOfTime(this.date.getHours());\r\n    }\r\n\r\n    minutes() {\r\n        return this.formatUnitOfTime(this.date.getMinutes());\r\n    }\r\n\r\n    seconds() {\r\n        return this.formatUnitOfTime(this.date.getSeconds());\r\n    }\r\n\r\n    dayOfWeek() {\r\n        return this.dayNames[this.date.getDay()];\r\n    }\r\n\r\n    dayOfMonth() {\r\n        return this.formatUnitOfTime(this.date.getUTCDate());\r\n    }\r\n\r\n    month() {\r\n        return this.monthNames[this.date.getMonth()];\r\n    }\r\n\r\n    year() {\r\n        return `${this.date.getFullYear()}`;\r\n    }\r\n\r\n    formatUnitOfTime(unitOfTime) {\r\n        return unitOfTime < 10 ? `0${unitOfTime}` : `${unitOfTime}`;\r\n    }\r\n\r\n    static toDateString(date) {\r\n        var dateTime = new DateTime(date);\r\n\r\n        return ` ${dateTime.dayOfMonth()} ${dateTime.month()} ${dateTime.year()} ${dateTime.dayOfWeek()}`;\r\n    }\r\n\r\n    static toTimeString(date) {\r\n        var dateTime = new DateTime(date);\r\n\r\n        return `${dateTime.hours()}:${dateTime.minutes()}:${dateTime.seconds()}`;\r\n    }\r\n}\r\n","import React from 'react'\r\nimport DateTime from './DateTime'\r\nimport PropTypes from 'prop-types';\r\n\r\n const  Display = (props) => (\r\n\r\n    <div className=\"clock\">\r\n        { props.isDateVisible && <p className=\"date\">{DateTime.toDateString(props.date)}</p> }\r\n        <p className=\"time\">{DateTime.toTimeString(props.date)}</p>\r\n        <h1 className=\"text\">DIGITAL CLOCK with React.js</h1>\r\n    </div>\r\n );\r\n\r\n Display.defaultProps = {\r\n    date: new Date(),\r\n    isDateVisible: true\r\n};\r\n\r\nDisplay.propTypes = {\r\n    date: PropTypes.object,\r\n    isDateVisible: PropTypes.bool\r\n};\r\n   \r\nexport default Display","import PropTypes from 'prop-types';\r\nimport React from 'react';\r\n\r\nconst Panel = (props) => {\r\n    return (\r\n        <div className=\"container\">\r\n            <h2></h2>\r\n            <div className=\"d-flex flex-row\">\r\n                <div className=\"col-md-1 mx-auto\">\r\n                    <div className=\"panel\"> \r\n                        <label className=\"switch\">\r\n                            <input type=\"checkbox\" checked={props.dateOn} onChange={props.toggleDate}/>\r\n                            <span class=\"slider\"></span>\r\n                        </label>                     \r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nPanel.defaultProps = {\r\n    dateOn: true,\r\n    toggleDate: () => {},\r\n};\r\n\r\nPanel.propTypes = {\r\n    dateOn: PropTypes.bool,\r\n    toggleDate: PropTypes.func\r\n};\r\n\r\nexport default Panel;\r\n","import React, { Component } from 'react'\r\nimport Display from './Display'\r\nimport Panel from './Panel'\r\n\r\n class Clock extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            date: new Date(),\r\n            isDateVisible: true\r\n        }\r\n        this.toggleDate = this.toggleDate.bind(this);\r\n    }\r\n    componentDidMount() {\r\n        this.startTime();\r\n    }\r\n    componentWillUnmount() {\r\n        clearInterval(this.timer);\r\n    }\r\n    startTime = () =>{\r\n      this.timer = setInterval(()=>{\r\n            this.setState({\r\n                date: new Date()\r\n            })\r\n        },1000);\r\n    }\r\n    toggleDate = () =>{\r\n        this.setState((prevState) => ({\r\n            isDateVisible : !prevState.isDateVisible\r\n        }));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Panel toggleDate={this.toggleDate}  dateOn={this.state.isDateVisible}/>\r\n                <Display date={this.state.date} isDateVisible={this.state.isDateVisible}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Clock","import './App.css';\nimport React, { Component } from 'react'\nimport Clock from './components/Clock'\n\nclass App extends Component {\n  \n  render() {\n    return (\n      <div>\n         <Clock />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}